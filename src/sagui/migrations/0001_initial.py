# Generated by Django 4.0.5 on 2022-06-30 15:35

import django.contrib.gis.db.models.fields
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='DataAssimilated',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('cell_id', models.SmallIntegerField(help_text='Cell identifier. Called cell in HYFAA netcdf file, field MINI in geospatial file', unique_for_date='date', verbose_name='Minibasin ID')),
                ('date', models.DateField(help_text='Date for the values', verbose_name='Date')),
                ('elevation_mean', models.FloatField(help_text='Water elevation in m. Mean value', null=True)),
                ('flow_mean', models.FloatField(help_text='Stream flow. Mean value', null=True)),
                ('update_time', models.DateTimeField(help_text='Time of last update', null=True)),
                ('is_analysis', models.BooleanField(help_text='Boolean. Whether the value comes from analysis or control series', null=True)),
                ('elevation_median', models.FloatField(help_text='Water elevation in m. Median value', null=True)),
                ('elevation_stddev', models.FloatField(help_text='Water elevation in m. Standard deviation', null=True)),
                ('elevation_mad', models.FloatField(help_text='Water elevation in m. Median absolute deviation', null=True)),
                ('flow_median', models.FloatField(help_text='Stream flow. Median value', null=True)),
                ('flow_stddev', models.FloatField(help_text='Stream flow. Standard deviation', null=True)),
                ('flow_mad', models.FloatField(help_text='Stream flow. Median absolute  deviation', null=True)),
                ('flow_expected', models.FloatField(help_text='Expected value. Calculated using a floating median, over the flow_median values taken on the day surrounding the current day (+ or - 10 days around), during the previous years', null=True)),
                ('flow_anomaly', models.FloatField(help_text='Represents the anomaly compared to expected data. Formula is 100 * (anomaly - expected) / expected', null=True)),
            ],
            options={
                'verbose_name': 'MGB hydrological data, calculated using HYFAA scheduler, with assimilation',
                'db_table': 'hyfaa_data_assimilated',
            },
        ),
        migrations.CreateModel(
            name='DataForecast',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('cell_id', models.SmallIntegerField(help_text='Cell identifier. Called cell in HYFAA netcdf file, field MINI in geospatial file', unique_for_date='date', verbose_name='Minibasin ID')),
                ('date', models.DateField(help_text='Date for the values', verbose_name='Date')),
                ('elevation_mean', models.FloatField(help_text='Water elevation in m. Mean value', null=True)),
                ('flow_mean', models.FloatField(help_text='Stream flow. Mean value', null=True)),
                ('update_time', models.DateTimeField(help_text='Time of last update', null=True)),
                ('is_analysis', models.BooleanField(help_text='Boolean. Whether the value comes from analysis or control series', null=True)),
                ('elevation_median', models.FloatField(help_text='Water elevation in m. Median value', null=True)),
                ('elevation_stddev', models.FloatField(help_text='Water elevation in m. Standard deviation', null=True)),
                ('elevation_mad', models.FloatField(help_text='Water elevation in m. Median absolute deviation', null=True)),
                ('flow_median', models.FloatField(help_text='Stream flow. Median value', null=True)),
                ('flow_stddev', models.FloatField(help_text='Stream flow. Standard deviation', null=True)),
                ('flow_mad', models.FloatField(help_text='Stream flow. Median absolute  deviation', null=True)),
            ],
            options={
                'verbose_name': 'Forecast MGB hydrological data, calculated using HYFAA scheduler, with assimilation',
                'db_table': 'hyfaa_data_forecast',
            },
        ),
        migrations.CreateModel(
            name='DataMgbStandard',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('cell_id', models.SmallIntegerField(help_text='Cell identifier. Called cell in HYFAA netcdf file, field MINI in geospatial file', unique_for_date='date', verbose_name='Minibasin ID')),
                ('date', models.DateField(help_text='Date for the values', verbose_name='Date')),
                ('elevation_mean', models.FloatField(help_text='Water elevation in m. Mean value', null=True)),
                ('flow_mean', models.FloatField(help_text='Stream flow. Mean value', null=True)),
                ('update_time', models.DateTimeField(help_text='Time of last update', null=True)),
                ('is_analysis', models.BooleanField(help_text='Boolean. Whether the value comes from analysis or control series', null=True)),
                ('flow_expected', models.FloatField(help_text='Expected value. Calculated using a floating median, over the flow_median values taken on the day surrounding the current day (+ or - 10 days around), during the previous years', null=True)),
                ('flow_anomaly', models.FloatField(help_text='Represents the anomaly compared to expected data. Formula is 100 * (anomaly - expected) / expected', null=True)),
            ],
            options={
                'verbose_name': 'MGB hydrological data, calculated using HYFAA scheduler, without assimilation',
                'db_table': 'hyfaa_data_mgbstandard',
            },
        ),
        migrations.CreateModel(
            name='Drainage',
            fields=[
                ('mini', models.SmallIntegerField(help_text='Minibasin identifier. Called cell in HYFAA netcdf file, field mini in geospatial file', primary_key=True, serialize=False, verbose_name='Minibasin ID')),
                ('geom', django.contrib.gis.db.models.fields.LineStringField(srid=4326)),
            ],
            options={
                'verbose_name': 'Drainage data (mini-sections of river/drainage) by minibasin',
                'db_table': 'hyfaa_drainage',
                'ordering': ['mini'],
            },
        ),
        migrations.CreateModel(
            name='DrainageInclusionMask',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=50, null=True)),
                ('mask', django.contrib.gis.db.models.fields.PolygonField(srid=4326)),
            ],
            options={
                'verbose_name': 'Inclusion Mask. Only data included in this mask polygons will be displayed. Overrides hyfaa exclusion mask',
                'db_table': 'hyfaa_geo_inclusion_mask',
            },
        ),
        migrations.CreateModel(
            name='ImportState',
            fields=[
                ('tablename', models.CharField(max_length=20, primary_key=True, serialize=False)),
                ('last_updated', models.DateTimeField(default='1950-01-01T00:00:00.000Z00', help_text='Datetime of last update from the netcdf data file', verbose_name='Last Updated')),
                ('last_updated_jd', models.FloatField(default=0, help_text='Datetime of last update from the netcdf data file. In CNES Julian days (0 is 01/01/1950)', verbose_name='Last updated in Julian days')),
                ('update_errors', models.SmallIntegerField(default=0, help_text='Nb of errors during update', verbose_name='Update errors')),
                ('last_updated_without_errors', models.DateTimeField(default='1950-01-01T00:00:00.000Z00', help_text='Datetime of last update from the netcdf data file', verbose_name='Last Updated')),
                ('last_updated_without_errors_jd', models.FloatField(default=0, help_text='Datetime of last update from the netcdf data file. In CNES Julian days (0 is 01/01/1950)', verbose_name='Last updated in Julian days')),
            ],
            options={
                'verbose_name': 'Information about the current state of the DB',
                'ordering': ['tablename'],
            },
        ),
        migrations.CreateModel(
            name='RainFall',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('cell_id', models.SmallIntegerField(help_text='Cell identifier. Called cell in HYFAA netcdf file, field MINI in geospatial file', unique_for_date='date', verbose_name='Minibasin ID')),
                ('date', models.DateField(help_text='Date for the values', verbose_name='Date')),
                ('rain', models.FloatField(verbose_name='Rain fall')),
            ],
            options={
                'verbose_name': 'Rainfall data (GSMap for now)',
                'ordering': ['-date'],
            },
        ),
        migrations.CreateModel(
            name='Stations',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=50)),
                ('river', models.CharField(blank=True, max_length=50, null=True)),
                ('threshold_drought', models.FloatField(default=-9999, help_text='in m3/s; when no threshold is defined, value is -9999; The values are the low limit of the category', verbose_name='Drought threshold')),
                ('threshold_flood_low', models.FloatField(default=-9999, help_text='in m3/s; when no threshold is defined, value is -9999; The values are the low limit of the category', verbose_name='Flood low threshold')),
                ('threshold_flood_mid', models.FloatField(default=-9999, help_text='in m3/s; when no threshold is defined, value is -9999; The values are the low limit of the category', verbose_name='Flood mid threshold')),
                ('threshold_flood_high', models.FloatField(default=-9999, help_text='in m3/s; when no threshold is defined, value is -9999; The values are the low limit of the category', verbose_name='Flood high threshold')),
                ('geom', django.contrib.gis.db.models.fields.PointField(null=True, srid=4326)),
                ('minibasin', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='sagui.drainage')),
            ],
            options={
                'verbose_name': 'Virtual station',
                'db_table': 'hyfaa_stations',
                'ordering': ['name'],
            },
        ),
        migrations.AddIndex(
            model_name='rainfall',
            index=models.Index(fields=['-date'], name='sagui_rainf_date_9c20b5_idx'),
        ),
        migrations.AddIndex(
            model_name='rainfall',
            index=models.Index(fields=['cell_id', '-date'], name='sagui_rainf_cell_id_ad0779_idx'),
        ),
        migrations.AddConstraint(
            model_name='rainfall',
            constraint=models.UniqueConstraint(fields=('cell_id', 'date'), name='rainfall_unique_cellid_day'),
        ),
        migrations.AddIndex(
            model_name='drainageinclusionmask',
            index=models.Index(fields=['mask'], name='hyfaa_geo_i_mask_15914e_idx'),
        ),
        migrations.AddIndex(
            model_name='drainage',
            index=models.Index(fields=['geom'], name='hyfaa_drain_geom_67a728_idx'),
        ),
        migrations.AddIndex(
            model_name='datamgbstandard',
            index=models.Index(fields=['-date'], name='hyfaa_data__date_dff1d0_idx'),
        ),
        migrations.AddIndex(
            model_name='datamgbstandard',
            index=models.Index(fields=['cell_id', '-date'], name='hyfaa_data__cell_id_eadfad_idx'),
        ),
        migrations.AddConstraint(
            model_name='datamgbstandard',
            constraint=models.UniqueConstraint(fields=('cell_id', 'date'), name='data_mgbstandard_unique_cellid_day'),
        ),
        migrations.AddIndex(
            model_name='dataforecast',
            index=models.Index(fields=['-date'], name='hyfaa_data__date_05c76e_idx'),
        ),
        migrations.AddIndex(
            model_name='dataforecast',
            index=models.Index(fields=['cell_id', '-date'], name='hyfaa_data__cell_id_ac5eff_idx'),
        ),
        migrations.AddConstraint(
            model_name='dataforecast',
            constraint=models.UniqueConstraint(fields=('cell_id', 'date'), name='data_forecast_unique_cellid_day'),
        ),
        migrations.AddIndex(
            model_name='dataassimilated',
            index=models.Index(fields=['-date'], name='hyfaa_data__date_bb30c6_idx'),
        ),
        migrations.AddIndex(
            model_name='dataassimilated',
            index=models.Index(fields=['cell_id', '-date'], name='hyfaa_data__cell_id_898b9c_idx'),
        ),
        migrations.AddConstraint(
            model_name='dataassimilated',
            constraint=models.UniqueConstraint(fields=('cell_id', 'date'), name='data_assimilated_unique_cellid_day'),
        ),
        migrations.AddConstraint(
            model_name='stations',
            constraint=models.UniqueConstraint(fields=('name',), name='stations_name_unique'),
        ),
    ]
