# Generated by Django 4.0.5 on 2022-07-13 14:26

from django.db import migrations


class Migration(migrations.Migration):

    dependencies = [
        ('sagui', '0026_forecast_aggregate_views'),
    ]

    operations = [
        migrations.RunSQL(
            """
DROP FUNCTION IF EXISTS guyane.func_stations_with_flow_previ() CASCADE;
CREATE OR REPLACE FUNCTION guyane.func_stations_with_flow_previ()
RETURNS TABLE(id bigint,
			  name varchar(50), 
			 river varchar(50),
			 minibasin smallint,
		     levels jsonb,
			 geom geometry(Point,4326))
AS $$
DECLARE
	dataset_tbl_name TEXT;
	query1 TEXT;
BEGIN
	-- get the name of the dataset to use to match the thresholds. Can be default (assimilated) or defined in the saguiconfig table
	SELECT 'guyane.hyfaa_forecast_with_' || COALESCE((SELECT use_dataset FROM guyane.sagui_saguiconfig LIMIT 1), 'assimilated') AS use_dataset
	INTO dataset_tbl_name;
	RAISE INFO 'dataset_tbl_name %', dataset_tbl_name;
		
	query1 := 'WITH stations AS (
                SELECT s.id, s.name, s.river, s.minibasin_id AS minibasin_id, s.geom, d."date", d.source, 
                    guyane.anomaly_to_alert_level(flow_anomaly) AS level
                FROM guyane.hyfaa_stations s INNER JOIN %s d
                    ON s.minibasin_id = d.cell_id
                ORDER BY s.name, d."date" DESC
            )
			SELECT id, name, river, minibasin_id, jsonb_agg(jsonb_build_object(
                ''date'',"date",
                ''source'', source,
                ''level'', level
            ) ORDER BY "date" DESC) AS levels, geom
			FROM stations
			GROUP BY id, name, river, minibasin_id, geom';
	RETURN QUERY EXECUTE format(query1, dataset_tbl_name, dataset_tbl_name);
END
$$ LANGUAGE plpgsql;
COMMENT ON FUNCTION guyane.func_stations_with_flow_previ() IS 
'Append forecast levels on stations data';

CREATE VIEW guyane.stations_with_flow_previ AS
SELECT * FROM guyane.func_stations_with_flow_previ();      
            """),
    ]
