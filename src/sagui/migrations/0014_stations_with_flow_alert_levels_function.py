# Generated by Django 4.0.5 on 2022-07-05 08:26

from django.db import migrations


class Migration(migrations.Migration):

    dependencies = [
        ('sagui', '0013_saguiconfig_stations_alert_use_dataset'),
    ]

    operations = [
        migrations.RunSQL(
        """
-- append alert status on the stations data
DROP FUNCTION IF EXISTS guyane.func_stations_with_flow_alerts() CASCADE;
CREATE OR REPLACE FUNCTION guyane.func_stations_with_flow_alerts()
RETURNS TABLE(id bigint,
			  name varchar(50), 
			 river varchar(50),
			 minibasin smallint,
		     levels jsonb,
			 geom geometry(Point,4326))
AS $$
DECLARE
	dataset_tbl_name TEXT;
	query1 TEXT;
	match_field TEXT;
BEGIN
	-- get the name of the dataset to use to match the thresholds. Can be default (assimilated) or defined in the saguiconfig table
	SELECT 'guyane.hyfaa_data_' || COALESCE((SELECT use_dataset FROM guyane.sagui_saguiconfig LIMIT 1), 'assimilated') AS use_dataset
	INTO dataset_tbl_name;
	--RAISE INFO 'dataset_tbl_name %', dataset_tbl_name;
	
	IF dataset_tbl_name = 'guyane.hyfaa_data_assimilated' 
	THEN match_field:='flow_median';
	ELSE match_field:='flow_mean'; --means we use mgbstandard dataset
	END IF;
    --RAISE INFO 'match_field %', match_field;
	
	query1 := 'WITH stations AS (SELECT s.id, s.name, s.river, s.minibasin_id, s.geom, d."date", 
				CASE
				  WHEN d.%1$s < s.threshold_drought THEN ''d2''
				  WHEN s.threshold_drought <= d.%1$s AND d.%1$s < s.threshold_flood_low THEN ''n''
				  WHEN s.threshold_flood_low <= d.%1$s AND d.%1$s < s.threshold_flood_mid THEN ''f1''
				  WHEN s.threshold_flood_mid <= d.%1$s AND d.%1$s < s.threshold_flood_high THEN ''f2''
				  WHEN d.%1$s >= s.threshold_flood_high THEN ''f3''
				  ELSE ''undefined''
				END AS level
				FROM guyane.hyfaa_stations s INNER JOIN %2$s d
				ON s.minibasin_id = d.cell_id
				WHERE d."date" > (SELECT MAX("date") FROM guyane.hyfaa_data_mgbstandard) - ''15 days''::interval
				ORDER BY s.name, d."date" DESC)
			SELECT id, name, river, minibasin_id, jsonb_agg(jsonb_build_object(''date'',"date",''level'',level)) AS levels, geom
			FROM stations
			GROUP BY id, name, river, minibasin_id, geom';
	RETURN QUERY EXECUTE format(query1, match_field, dataset_tbl_name);
END
$$ LANGUAGE plpgsql;
COMMENT ON FUNCTION guyane.func_stations_with_flow_alerts() IS 
'Append alert levels on stations data';

--  Create a view using this function, it will be easier to call from Django
CREATE OR REPLACE VIEW guyane.stations_with_flow_alerts AS
SELECT * FROM guyane.func_stations_with_flow_alerts();        
        """),
    ]
